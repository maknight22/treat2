input.growthcat = factor(input.growthcat, levels=c(0,1),
labels=c("No","Yes"))
## Format other categorical inputs
input.gender = ifelse(input.gender=="Male", 1, input.gender)
input.gender = ifelse(input.gender=="Female", 0, input.gender)
input.gender = factor(input.gender, levels=c(0,1),
labels=c("F","M"))
input.spicul = ifelse(input.spicul=="Yes", 1, input.spicul)
input.spicul = ifelse(input.spicul=="No", 0, input.spicul)
input.upperlobe = ifelse(input.upperlobe=="Yes", 1, input.upperlobe)
input.upperlobe = ifelse(input.upperlobe=="No", 0, input.upperlobe)
input.prev_cancer = ifelse(input.prev_cancer=="Yes", 1, input.prev_cancer)
input.prev_cancer = ifelse(input.prev_cancer=="No", 0, input.prev_cancer)
input.anysympt = ifelse(input.anysympt=="Yes", 1, input.anysympt)
input.anysympt = ifelse(input.anysympt=="No", 0, input.anysympt)
input.petavid = ifelse(input.petavid=="Yes", 1, input.petavid)
input.petavid = ifelse(input.petavid=="No", 0, input.petavid)
input.group =
ifelse(input.group=="Pulmonary Nodule Clinic", 1, input.group)
input.group =
ifelse(input.group=="Thoracic Surgery Clinic", 2, input.group)
input.group =
ifelse(input.group=="Surgical Resection", 3, input.group)
input.group = factor(input.group, levels=c(1,2,3),
labels=c("Pulm","Thoracic","Surgery"))
## Format numerical inputs if none given (still at 0 default value)
input.age = ifelse(input.age==0, NA, input.age)
input.bmi_new = ifelse(input.bmi_new==0, NA, input.bmi_new)
input.packs = ifelse(input.packs==0, NA, input.packs)
input.size = ifelse(input.size==0, NA, input.size)
input.fev1 = ifelse(input.fev1==0, NA, input.fev1)
## Combine into single data frame
input = data.frame(
"age" = input.age,
"bmi_new" = input.bmi_new,
"gender" = input.gender,
"packs" = input.packs,
"size" = input.size,
"spicul" = input.spicul,
"upperlobe" = input.upperlobe,
"growthcat" = input.growthcat,
"prev_cancer" = input.prev_cancer,
"fev1" = input.fev1,
"anysympt" = input.anysympt,
"petavid" = input.petavid,
"group" = input.group)
input = input[pred.vars]  # re-order to match saved results
## Find matching missing pattern and load model fit
NtMiss.Vars = pred.vars[which(!is.na(input))]
PMKS_vars_tmp_idx = which(lengths(PMKS_vars) == length(NtMiss.Vars))
pattern = names(which(sapply( PMKS_vars_tmp_idx, function(j) length(setdiff(NtMiss.Vars, PMKS_vars[[j]])) ) == 0))
which_fit = which(names(PMKS_vars) == pattern)
## --> Load corresponding glm fit
fit = get(load(file.path(TREAT2.0_data_dir, paste("PMKS_treat2.0_fits_trimmed/PMKS_treat2.0_fits_",rownames(MP[which_fit,]),"_trimmed.rds",sep=""))))
print(paste("PMKS_treat2.0_fits_trimmed/PMKS_treat2.0_fits_",rownames(MP[which_fit,]),"_trimmed.rds",sep=""))
## Process data
## --> Remove missing predictors
input = input[,NtMiss.Vars]
## --> Create model matrix (spline terms, categorical dummy variables, interactions)
data_preprocess_VW_v3 = function(data, y.name, vars) {
## Make spline terms and interactions
packs_knots =   c("25%"=25, "50%"=40, "75%"=60)
age_knots =     c("25%"=59, "50%"=66, "75%"=72)
size_knots =    c("25%"=15, "50%"=22, "75%"=34)
bmi_new_knots = c("25%"=23.5, "50%"=26.5, "75%"=30.7)
fev1_knots =    c("25%"=63, "50%"=77, "75%"=89.5)
model_form_rcs = vars
model_form_rcs = gsub("packs", paste("rcs(packs,c(",paste(packs_knots,collapse=","),")",")",sep=""), model_form_rcs)
model_form_rcs = gsub("age", paste("rcs(age,c(",paste(age_knots,collapse=","),")",")",sep=""), model_form_rcs)
model_form_rcs = gsub("size", paste("rcs(size,c(",paste(size_knots,collapse=","),")",")",sep=""), model_form_rcs)
model_form_rcs = gsub("bmi_new", paste("rcs(bmi_new,c(",paste(bmi_new_knots,collapse=","),")",")",sep=""), model_form_rcs)
model_form_rcs = gsub("fev1", paste("rcs(fev1,c(",paste(fev1_knots,collapse=","),")",")",sep=""), model_form_rcs)
model_form_rcs = paste(model_form_rcs, collapse=" + ")
## Specify up to 4-way interaction terms (all 2-way, 3-way, and 4-way interactions:
model_form_rcs = formula(paste(y.name, " ~ (", model_form_rcs, ")^4", sep=""))
## Make all spline, categorical dummy, and interaction terms:
X = as.data.frame(t(model.matrix(object=model_form_rcs, data=data)[,-1]))
# View(t(X[,1:50]))
## Function to re-name the rcs terms found in the column names of the expanded model matrix
names = colnames(X)
for(i in 1:length(names)) {
t = names[i]
inter = strsplit(t, ":")[[1]]
for(j in 1:length(inter)) {
ti = inter[j]
if(length(grep("rcs",ti,v=T))>0) {
if(length(grep("\\)\\)",ti,v=T))==0) {
ti1 = gsub("rcs\\((.*?)\\).*", "\\1", ti)
ti2 = strsplit(ti1, ", ")[[1]]
rn1 = gsub("\\(.*?\\)",".", ti)
}
if(length(grep("\\)\\)",ti,v=T))>0) {
ti1 = gsub("rcs\\((.*?\\))\\).*", "\\1", ti)
ti2 = strsplit(ti1, ", ")[[1]]
rn1 = gsub("\\(.*?\\)\\)",".", ti)
}
rn2 = ifelse(length(grep("'",rn1,v=T))==0, paste(rn1,".0",sep=""), rn1 %>% gsub("'''''", ".6", .) %>% gsub("'''''", ".5", .) %>% gsub("''''", ".4", .) %>% gsub("'''", ".3", .) %>% gsub("''", ".2", .) %>% gsub("'", ".1", .))
inter[j] = rn2
}
}
names[i] = paste(inter, collapse=":")
}
# View(data.frame(rbind(t(colnames(X)), t(names)))) # check function
data_return = data.frame(cbind(data[,y.name], X))
colnames(data_return) = c(y.name, names)
########################
return(data_return)
}
input.processed = data_preprocess_VW_v3(data=cbind("y"=1,input),y.name="y",vars=NtMiss.Vars)
input.processed$y = NA
## Get predicted probability & 95% confidence interval for fitted value (not a prediction interval)
expit = function(z){exp(z)/(1+exp(z))}
lev = qt(1-0.05/2, fit$df.residual)  # qnorm(1-0.05/2)
pred.val = predict(fit, newdata=input.processed, type="link", se.fit=TRUE)
prob = expit(pred.val$fit)
prob.lowerbound = expit(pred.val$fit - lev*pred.val$se.fit)
prob.upperbound = expit(pred.val$fit + lev*pred.val$se.fit)
cat(paste0("Predicted lung cancer risk \n",round(prob*100, 1),"% \n (95% Confidence Interval = (",round(prob.lowerbound*100,1),"%, ",round(prob.upperbound*100,1),"%))"))
## Inputs from Shiny:
input.age = NA           # Age [age]: Numeric
input.bmi_new = NA       # BMI [bmi_new]: Numeric
input.gender = NA        # Gender [gender]: {Male, Female}
input.packs = NA         # Pack Years [packs]: Numeric
input.size = NA          # Lesion Size (mm) [size]: Numeric
input.spicul = NA        # Spiculated Lesion Edge [spicul]: {Yes, No}
input.upperlobe = NA     # Upper Lobe? [upperlobe]: {Upper Lobe, Lower Lobe}
input.growthcat = NA     # Lesion Growth [growthcat]: {Growth Observed, No Lesion Growth, Insuffient Data} // note: treat insufficient data the same as general missing
input.prev_cancer = NA   # Previous Cancer? [prev_cancer]: {Yes, No}
input.fev1 = NA          # Predicted FEV [fev1]: Numeric
input.anysympt = NA      # Pre-Op Symptoms? [anysympt]: {Yes, No}
input.petavid = NA       # FDG-PET Avid? [petavid]: {Yes, No}
input.group = NA         # Setting of Evaluation [group]: {Pulmonary Nodule Clinic, Thoracic Surgery Clinic, Surgical Resection}
## ------------------------------------------------------------ ##
TREAT2.0_data_dir = "./"
#### change to file location of "MP_matrix.rds", "PMKS_vars.rds", and "PMKS_treat2.0_fits_trimmed/" folder
MP = get(load(file=file.path(TREAT2.0_data_dir, "MP_matrix.rds")))
PMKS_vars = get(load(file=file.path(TREAT2.0_data_dir, "PMKS_vars.rds")))
library(rms)
library(dplyr)
## ------------------------------------------------------------ ##
# Examples
## Missing: [anysympt]
#input.age = 50
#input.bmi_new = 26
#input.gender = "Female"
#input.packs = 30
#input.size = 20
#input.spicul = "No"
#input.upperlobe = "No"
#input.growthcat = "No Lesion Growth"
#input.prev_cancer = "Yes"
#input.fev1 = 80
#input.anysympt = NA
#input.petavid = "No"
#input.group = "Thoracic Surgery Clinic"
## Missing: [anysympt, growth]
input.age = 50
input.bmi_new = 26
input.gender = "Female"
input.packs = 30
input.size = 20
input.spicul = "No"
input.upperlobe = "No"
input.growthcat = "Insufficient Data"
input.prev_cancer = "Yes"
input.fev1 = 80
input.anysympt = "No"
input.petavid = "No"
input.group = "Thoracic Surgery Clinic"
## Missing: [age, growth]
#input.age = 0
#input.bmi_new = 26
#input.gender = "Female"
#input.packs = 30
#input.size = 20
#input.spicul = "No"
#input.upperlobe = "No"
#input.growthcat = "Insufficient Data"
#input.prev_cancer = "Yes"
#input.fev1 = 80
#input.anysympt = "Yes"
#input.petavid = "No"
#input.group = "Thoracic Surgery Clinic"
## ------------------------------------------------------------ ##
#Print("Calculating...")
## ------------------------------------------------------------ ##
pred.vars = c("Age" = "age", "BMI" = "bmi_new", "Gender" = "gender", "Pack Years" = "packs", "Lesion Size (mm)" = "size", "Spiculated Lesion Edge" = "spicul", "Upper Lobe?" = "upperlobe", "Lesion Growth" = "growthcat", "Previous Cancer?" = "prev_cancer", "Predicted FEV" = "fev1", "Pre-Op Symptoms?" = "anysympt", "FDG-PET Avid?" = "petavid", "Setting of Evaluation" = "group")
pred.vars = sort(pred.vars)
## ------------------------------------------------------------ ##
## Growth variable - treat insufficient data as missing
input.growthcat =
ifelse(input.growthcat=="Growth Observed", 1, input.growthcat)
input.growthcat =
ifelse(input.growthcat=="No Lesion Growth", 0, input.growthcat)
input.growthcat =
ifelse(input.growthcat=="Insufficient Data", NA, input.growthcat)
input.growthcat = as.numeric(input.growthcat)
input.growthcat = factor(input.growthcat, levels=c(0,1),
labels=c("No","Yes"))
## Format other categorical inputs
input.gender = ifelse(input.gender=="Male", 1, input.gender)
input.gender = ifelse(input.gender=="Female", 0, input.gender)
input.gender = factor(input.gender, levels=c(0,1),
labels=c("F","M"))
input.spicul = ifelse(input.spicul=="Yes", 1, input.spicul)
input.spicul = ifelse(input.spicul=="No", 0, input.spicul)
input.upperlobe = ifelse(input.upperlobe=="Yes", 1, input.upperlobe)
input.upperlobe = ifelse(input.upperlobe=="No", 0, input.upperlobe)
input.prev_cancer = ifelse(input.prev_cancer=="Yes", 1, input.prev_cancer)
input.prev_cancer = ifelse(input.prev_cancer=="No", 0, input.prev_cancer)
input.anysympt = ifelse(input.anysympt=="Yes", 1, input.anysympt)
input.anysympt = ifelse(input.anysympt=="No", 0, input.anysympt)
input.petavid = ifelse(input.petavid=="Yes", 1, input.petavid)
input.petavid = ifelse(input.petavid=="No", 0, input.petavid)
input.group =
ifelse(input.group=="Pulmonary Nodule Clinic", 1, input.group)
input.group =
ifelse(input.group=="Thoracic Surgery Clinic", 2, input.group)
input.group =
ifelse(input.group=="Surgical Resection", 3, input.group)
input.group = factor(input.group, levels=c(1,2,3),
labels=c("Pulm","Thoracic","Surgery"))
## Format numerical inputs if none given (still at 0 default value)
input.age = ifelse(input.age==0, NA, input.age)
input.bmi_new = ifelse(input.bmi_new==0, NA, input.bmi_new)
input.packs = ifelse(input.packs==0, NA, input.packs)
input.size = ifelse(input.size==0, NA, input.size)
input.fev1 = ifelse(input.fev1==0, NA, input.fev1)
## Combine into single data frame
input = data.frame(
"age" = input.age,
"bmi_new" = input.bmi_new,
"gender" = input.gender,
"packs" = input.packs,
"size" = input.size,
"spicul" = input.spicul,
"upperlobe" = input.upperlobe,
"growthcat" = input.growthcat,
"prev_cancer" = input.prev_cancer,
"fev1" = input.fev1,
"anysympt" = input.anysympt,
"petavid" = input.petavid,
"group" = input.group)
input = input[pred.vars]  # re-order to match saved results
## Find matching missing pattern and load model fit
NtMiss.Vars = pred.vars[which(!is.na(input))]
PMKS_vars_tmp_idx = which(lengths(PMKS_vars) == length(NtMiss.Vars))
pattern = names(which(sapply( PMKS_vars_tmp_idx, function(j) length(setdiff(NtMiss.Vars, PMKS_vars[[j]])) ) == 0))
which_fit = which(names(PMKS_vars) == pattern)
## --> Load corresponding glm fit
fit = get(load(file.path(TREAT2.0_data_dir, paste("PMKS_treat2.0_fits_trimmed/PMKS_treat2.0_fits_",rownames(MP[which_fit,]),"_trimmed.rds",sep=""))))
print(paste("PMKS_treat2.0_fits_trimmed/PMKS_treat2.0_fits_",rownames(MP[which_fit,]),"_trimmed.rds",sep=""))
## Process data
## --> Remove missing predictors
input = input[,NtMiss.Vars]
## --> Create model matrix (spline terms, categorical dummy variables, interactions)
data_preprocess_VW_v3 = function(data, y.name, vars) {
## Make spline terms and interactions
packs_knots =   c("25%"=25, "50%"=40, "75%"=60)
age_knots =     c("25%"=59, "50%"=66, "75%"=72)
size_knots =    c("25%"=15, "50%"=22, "75%"=34)
bmi_new_knots = c("25%"=23.5, "50%"=26.5, "75%"=30.7)
fev1_knots =    c("25%"=63, "50%"=77, "75%"=89.5)
model_form_rcs = vars
model_form_rcs = gsub("packs", paste("rcs(packs,c(",paste(packs_knots,collapse=","),")",")",sep=""), model_form_rcs)
model_form_rcs = gsub("age", paste("rcs(age,c(",paste(age_knots,collapse=","),")",")",sep=""), model_form_rcs)
model_form_rcs = gsub("size", paste("rcs(size,c(",paste(size_knots,collapse=","),")",")",sep=""), model_form_rcs)
model_form_rcs = gsub("bmi_new", paste("rcs(bmi_new,c(",paste(bmi_new_knots,collapse=","),")",")",sep=""), model_form_rcs)
model_form_rcs = gsub("fev1", paste("rcs(fev1,c(",paste(fev1_knots,collapse=","),")",")",sep=""), model_form_rcs)
model_form_rcs = paste(model_form_rcs, collapse=" + ")
## Specify up to 4-way interaction terms (all 2-way, 3-way, and 4-way interactions:
model_form_rcs = formula(paste(y.name, " ~ (", model_form_rcs, ")^4", sep=""))
## Make all spline, categorical dummy, and interaction terms:
X = as.data.frame(t(model.matrix(object=model_form_rcs, data=data)[,-1]))
# View(t(X[,1:50]))
## Function to re-name the rcs terms found in the column names of the expanded model matrix
names = colnames(X)
for(i in 1:length(names)) {
t = names[i]
inter = strsplit(t, ":")[[1]]
for(j in 1:length(inter)) {
ti = inter[j]
if(length(grep("rcs",ti,v=T))>0) {
if(length(grep("\\)\\)",ti,v=T))==0) {
ti1 = gsub("rcs\\((.*?)\\).*", "\\1", ti)
ti2 = strsplit(ti1, ", ")[[1]]
rn1 = gsub("\\(.*?\\)",".", ti)
}
if(length(grep("\\)\\)",ti,v=T))>0) {
ti1 = gsub("rcs\\((.*?\\))\\).*", "\\1", ti)
ti2 = strsplit(ti1, ", ")[[1]]
rn1 = gsub("\\(.*?\\)\\)",".", ti)
}
rn2 = ifelse(length(grep("'",rn1,v=T))==0, paste(rn1,".0",sep=""), rn1 %>% gsub("'''''", ".6", .) %>% gsub("'''''", ".5", .) %>% gsub("''''", ".4", .) %>% gsub("'''", ".3", .) %>% gsub("''", ".2", .) %>% gsub("'", ".1", .))
inter[j] = rn2
}
}
names[i] = paste(inter, collapse=":")
}
# View(data.frame(rbind(t(colnames(X)), t(names)))) # check function
data_return = data.frame(cbind(data[,y.name], X))
colnames(data_return) = c(y.name, names)
########################
return(data_return)
}
input.processed = data_preprocess_VW_v3(data=cbind("y"=1,input),y.name="y",vars=NtMiss.Vars)
input.processed$y = NA
## Get predicted probability & 95% confidence interval for fitted value (not a prediction interval)
expit = function(z){exp(z)/(1+exp(z))}
lev = qt(1-0.05/2, fit$df.residual)  # qnorm(1-0.05/2)
pred.val = predict(fit, newdata=input.processed, type="link", se.fit=TRUE)
prob = expit(pred.val$fit)
prob.lowerbound = expit(pred.val$fit - lev*pred.val$se.fit)
prob.upperbound = expit(pred.val$fit + lev*pred.val$se.fit)
cat(paste0("Predicted lung cancer risk \n",round(prob*100, 1),"% \n (95% Confidence Interval = (",round(prob.lowerbound*100,1),"%, ",round(prob.upperbound*100,1),"%))"))
## Inputs from Shiny:
input.age = NA           # Age [age]: Numeric
input.bmi_new = NA       # BMI [bmi_new]: Numeric
input.gender = NA        # Gender [gender]: {Male, Female}
input.packs = NA         # Pack Years [packs]: Numeric
input.size = NA          # Lesion Size (mm) [size]: Numeric
input.spicul = NA        # Spiculated Lesion Edge [spicul]: {Yes, No}
input.upperlobe = NA     # Upper Lobe? [upperlobe]: {Upper Lobe, Lower Lobe}
input.growthcat = NA     # Lesion Growth [growthcat]: {Growth Observed, No Lesion Growth, Insuffient Data} // note: treat insufficient data the same as general missing
input.prev_cancer = NA   # Previous Cancer? [prev_cancer]: {Yes, No}
input.fev1 = NA          # Predicted FEV [fev1]: Numeric
input.anysympt = NA      # Pre-Op Symptoms? [anysympt]: {Yes, No}
input.petavid = NA       # FDG-PET Avid? [petavid]: {Yes, No}
input.group = NA         # Setting of Evaluation [group]: {Pulmonary Nodule Clinic, Thoracic Surgery Clinic, Surgical Resection}
## ------------------------------------------------------------ ##
TREAT2.0_data_dir = "./"
#### change to file location of "MP_matrix.rds", "PMKS_vars.rds", and "PMKS_treat2.0_fits_trimmed/" folder
MP = get(load(file=file.path(TREAT2.0_data_dir, "MP_matrix.rds")))
PMKS_vars = get(load(file=file.path(TREAT2.0_data_dir, "PMKS_vars.rds")))
library(rms)
library(dplyr)
## ------------------------------------------------------------ ##
# Examples
## Missing: [anysympt]
#input.age = 50
#input.bmi_new = 26
#input.gender = "Female"
#input.packs = 30
#input.size = 20
#input.spicul = "No"
#input.upperlobe = "No"
#input.growthcat = "No Lesion Growth"
#input.prev_cancer = "Yes"
#input.fev1 = 80
#input.anysympt = NA
#input.petavid = "No"
#input.group = "Thoracic Surgery Clinic"
## Missing: [anysympt, growth]
#input.age = 50
#input.bmi_new = 26
#input.gender = "Female"
#input.packs = 30
#input.size = 20
#input.spicul = "No"
#input.upperlobe = "No"
#input.growthcat = "Insufficient Data"
#input.prev_cancer = "Yes"
#input.fev1 = 80
#input.anysympt = "No"
#input.petavid = "No"
#input.group = "Thoracic Surgery Clinic"
## Missing: [age, growth]
input.age = 0
input.bmi_new = 26
input.gender = "Female"
input.packs = 30
input.size = 20
input.spicul = "No"
input.upperlobe = "No"
input.growthcat = "Insufficient Data"
input.prev_cancer = "Yes"
input.fev1 = 80
input.anysympt = "Yes"
input.petavid = "No"
input.group = "Thoracic Surgery Clinic"
## ------------------------------------------------------------ ##
#Print("Calculating...")
## ------------------------------------------------------------ ##
pred.vars = c("Age" = "age", "BMI" = "bmi_new", "Gender" = "gender", "Pack Years" = "packs", "Lesion Size (mm)" = "size", "Spiculated Lesion Edge" = "spicul", "Upper Lobe?" = "upperlobe", "Lesion Growth" = "growthcat", "Previous Cancer?" = "prev_cancer", "Predicted FEV" = "fev1", "Pre-Op Symptoms?" = "anysympt", "FDG-PET Avid?" = "petavid", "Setting of Evaluation" = "group")
pred.vars = sort(pred.vars)
## ------------------------------------------------------------ ##
## Growth variable - treat insufficient data as missing
input.growthcat =
ifelse(input.growthcat=="Growth Observed", 1, input.growthcat)
input.growthcat =
ifelse(input.growthcat=="No Lesion Growth", 0, input.growthcat)
input.growthcat =
ifelse(input.growthcat=="Insufficient Data", NA, input.growthcat)
input.growthcat = as.numeric(input.growthcat)
input.growthcat = factor(input.growthcat, levels=c(0,1),
labels=c("No","Yes"))
## Format other categorical inputs
input.gender = ifelse(input.gender=="Male", 1, input.gender)
input.gender = ifelse(input.gender=="Female", 0, input.gender)
input.gender = factor(input.gender, levels=c(0,1),
labels=c("F","M"))
input.spicul = ifelse(input.spicul=="Yes", 1, input.spicul)
input.spicul = ifelse(input.spicul=="No", 0, input.spicul)
input.upperlobe = ifelse(input.upperlobe=="Yes", 1, input.upperlobe)
input.upperlobe = ifelse(input.upperlobe=="No", 0, input.upperlobe)
input.prev_cancer = ifelse(input.prev_cancer=="Yes", 1, input.prev_cancer)
input.prev_cancer = ifelse(input.prev_cancer=="No", 0, input.prev_cancer)
input.anysympt = ifelse(input.anysympt=="Yes", 1, input.anysympt)
input.anysympt = ifelse(input.anysympt=="No", 0, input.anysympt)
input.petavid = ifelse(input.petavid=="Yes", 1, input.petavid)
input.petavid = ifelse(input.petavid=="No", 0, input.petavid)
input.group =
ifelse(input.group=="Pulmonary Nodule Clinic", 1, input.group)
input.group =
ifelse(input.group=="Thoracic Surgery Clinic", 2, input.group)
input.group =
ifelse(input.group=="Surgical Resection", 3, input.group)
input.group = factor(input.group, levels=c(1,2,3),
labels=c("Pulm","Thoracic","Surgery"))
## Format numerical inputs if none given (still at 0 default value)
input.age = ifelse(input.age==0, NA, input.age)
input.bmi_new = ifelse(input.bmi_new==0, NA, input.bmi_new)
input.packs = ifelse(input.packs==0, NA, input.packs)
input.size = ifelse(input.size==0, NA, input.size)
input.fev1 = ifelse(input.fev1==0, NA, input.fev1)
## Combine into single data frame
input = data.frame(
"age" = input.age,
"bmi_new" = input.bmi_new,
"gender" = input.gender,
"packs" = input.packs,
"size" = input.size,
"spicul" = input.spicul,
"upperlobe" = input.upperlobe,
"growthcat" = input.growthcat,
"prev_cancer" = input.prev_cancer,
"fev1" = input.fev1,
"anysympt" = input.anysympt,
"petavid" = input.petavid,
"group" = input.group)
input = input[pred.vars]  # re-order to match saved results
## Find matching missing pattern and load model fit
NtMiss.Vars = pred.vars[which(!is.na(input))]
PMKS_vars_tmp_idx = which(lengths(PMKS_vars) == length(NtMiss.Vars))
pattern = names(which(sapply( PMKS_vars_tmp_idx, function(j) length(setdiff(NtMiss.Vars, PMKS_vars[[j]])) ) == 0))
which_fit = which(names(PMKS_vars) == pattern)
## --> Load corresponding glm fit
fit = get(load(file.path(TREAT2.0_data_dir, paste("PMKS_treat2.0_fits_trimmed/PMKS_treat2.0_fits_",rownames(MP[which_fit,]),"_trimmed.rds",sep=""))))
print(paste("PMKS_treat2.0_fits_trimmed/PMKS_treat2.0_fits_",rownames(MP[which_fit,]),"_trimmed.rds",sep=""))
## Process data
## --> Remove missing predictors
input = input[,NtMiss.Vars]
## --> Create model matrix (spline terms, categorical dummy variables, interactions)
data_preprocess_VW_v3 = function(data, y.name, vars) {
## Make spline terms and interactions
packs_knots =   c("25%"=25, "50%"=40, "75%"=60)
age_knots =     c("25%"=59, "50%"=66, "75%"=72)
size_knots =    c("25%"=15, "50%"=22, "75%"=34)
bmi_new_knots = c("25%"=23.5, "50%"=26.5, "75%"=30.7)
fev1_knots =    c("25%"=63, "50%"=77, "75%"=89.5)
model_form_rcs = vars
model_form_rcs = gsub("packs", paste("rcs(packs,c(",paste(packs_knots,collapse=","),")",")",sep=""), model_form_rcs)
model_form_rcs = gsub("age", paste("rcs(age,c(",paste(age_knots,collapse=","),")",")",sep=""), model_form_rcs)
model_form_rcs = gsub("size", paste("rcs(size,c(",paste(size_knots,collapse=","),")",")",sep=""), model_form_rcs)
model_form_rcs = gsub("bmi_new", paste("rcs(bmi_new,c(",paste(bmi_new_knots,collapse=","),")",")",sep=""), model_form_rcs)
model_form_rcs = gsub("fev1", paste("rcs(fev1,c(",paste(fev1_knots,collapse=","),")",")",sep=""), model_form_rcs)
model_form_rcs = paste(model_form_rcs, collapse=" + ")
## Specify up to 4-way interaction terms (all 2-way, 3-way, and 4-way interactions:
model_form_rcs = formula(paste(y.name, " ~ (", model_form_rcs, ")^4", sep=""))
## Make all spline, categorical dummy, and interaction terms:
X = as.data.frame(t(model.matrix(object=model_form_rcs, data=data)[,-1]))
# View(t(X[,1:50]))
## Function to re-name the rcs terms found in the column names of the expanded model matrix
names = colnames(X)
for(i in 1:length(names)) {
t = names[i]
inter = strsplit(t, ":")[[1]]
for(j in 1:length(inter)) {
ti = inter[j]
if(length(grep("rcs",ti,v=T))>0) {
if(length(grep("\\)\\)",ti,v=T))==0) {
ti1 = gsub("rcs\\((.*?)\\).*", "\\1", ti)
ti2 = strsplit(ti1, ", ")[[1]]
rn1 = gsub("\\(.*?\\)",".", ti)
}
if(length(grep("\\)\\)",ti,v=T))>0) {
ti1 = gsub("rcs\\((.*?\\))\\).*", "\\1", ti)
ti2 = strsplit(ti1, ", ")[[1]]
rn1 = gsub("\\(.*?\\)\\)",".", ti)
}
rn2 = ifelse(length(grep("'",rn1,v=T))==0, paste(rn1,".0",sep=""), rn1 %>% gsub("'''''", ".6", .) %>% gsub("'''''", ".5", .) %>% gsub("''''", ".4", .) %>% gsub("'''", ".3", .) %>% gsub("''", ".2", .) %>% gsub("'", ".1", .))
inter[j] = rn2
}
}
names[i] = paste(inter, collapse=":")
}
# View(data.frame(rbind(t(colnames(X)), t(names)))) # check function
data_return = data.frame(cbind(data[,y.name], X))
colnames(data_return) = c(y.name, names)
########################
return(data_return)
}
input.processed = data_preprocess_VW_v3(data=cbind("y"=1,input),y.name="y",vars=NtMiss.Vars)
input.processed$y = NA
## Get predicted probability & 95% confidence interval for fitted value (not a prediction interval)
expit = function(z){exp(z)/(1+exp(z))}
lev = qt(1-0.05/2, fit$df.residual)  # qnorm(1-0.05/2)
pred.val = predict(fit, newdata=input.processed, type="link", se.fit=TRUE)
prob = expit(pred.val$fit)
prob.lowerbound = expit(pred.val$fit - lev*pred.val$se.fit)
prob.upperbound = expit(pred.val$fit + lev*pred.val$se.fit)
cat(paste0("Predicted lung cancer risk \n",round(prob*100, 1),"% \n (95% Confidence Interval = (",round(prob.lowerbound*100,1),"%, ",round(prob.upperbound*100,1),"%))"))
